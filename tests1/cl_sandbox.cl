#include "obj.hcl"t_hit *sphere_inter(        __global t_obj *obj,        t_ray *ray,        t_hit *hit){    t_vec3 L;    t_real tca;    t_real thc;    t_real t0;    t_real t1;    L = obj->pos - ray->orig;    tca = dot(L, ray->dir);//    printf("tca: %f\n", tca);    if (tca < 0)        return (NULL);    thc = dot(L, L) - tca * tca;    if (thc > obj->radius)        return (NULL);    t0 = sqrt(obj->radius - thc);    t1 = tca + t0;    t0 = tca - t0;    if (t1 < 0 && t0 < 0)        return (NULL);    t0 = t0 > t1 && t1 > 0 ? t1 : t0;    hit->pos = ray->orig + ray->dir * t0;    hit->norm = normalize(hit->pos - obj->pos);    hit->obj = obj;    return (hit);}void pv(double3 v){    printf("------{%f %f %f}------\n", v.x, v.y, v.z);}t_mat4 m4_mul(t_mat4 M, t_mat4 N){    t_mat4 result = (t_mat4){        M.s0 * N.s0 + M.s1 * N.s4 + M.s2 * N.s8 + M.s3 * N.sC,        M.s0 * N.s1 + M.s1 * N.s5 + M.s2 * N.s9 + M.s3 * N.sD,        M.s0 * N.s2 + M.s1 * N.s6 + M.s2 * N.sA + M.s3 * N.sE,        M.s0 * N.s3 + M.s1 * N.s7 + M.s2 * N.sB + M.s3 * N.sF,        M.s4 * N.s0 + M.s5 * N.s4 + M.s6 * N.s8 + M.s7 * N.sC,        M.s4 * N.s1 + M.s5 * N.s5 + M.s6 * N.s9 + M.s7 * N.sD,        M.s4 * N.s2 + M.s5 * N.s6 + M.s6 * N.sA + M.s7 * N.sE,        M.s4 * N.s3 + M.s5 * N.s7 + M.s6 * N.sB + M.s7 * N.sF,        M.s8 * N.s0 + M.s9 * N.s4 + M.sA * N.s8 + M.sB * N.sC,        M.s8 * N.s1 + M.s9 * N.s5 + M.sA * N.s9 + M.sB * N.sD,        M.s8 * N.s2 + M.s9 * N.s6 + M.sA * N.sA + M.sB * N.sE,        M.s8 * N.s3 + M.s9 * N.s7 + M.sA * N.sB + M.sB * N.sF,        M.sC * N.s0 + M.sD * N.s4 + M.sE * N.s8 + M.sF * N.sC,        M.sC * N.s1 + M.sD * N.s5 + M.sE * N.s9 + M.sF * N.sD,        M.sC * N.s2 + M.sD * N.s6 + M.sE * N.sA + M.sF * N.sE,        M.sC * N.s3 + M.sD * N.s7 + M.sE * N.sB + M.sF * N.sF};    return (result);}void print_args(        t_options *options,        t_cam* camera,        __global t_obj* scene,        __global t_light* lights    ){    printf("Options:\n"           "\tfov: %f\n"           "\twidth: %d\n"           "\theight: %d\n"           "\tscene_size: %d\n"           "\tlights_size: %d\n"           "\tcameras_size: %d\n",           options->fov,           options->width,           options->height,           options->scene_size,           options->lights_size,           options->cameras_size           );    int i = 0;    while (i < options->scene_size)    {        printf("Obj: id: %d radius: %f pos: {%f %f %f}\n",                scene[i].id, scene[i].radius,                scene[i].pos.x,                scene[i].pos.y,                scene[i].pos.z);        i++;    }    printf("\n");}__kernel void k_render(        t_options options,        t_cam camera,		__global t_obj* scene,		__global t_light* lights,        __global t_int* output){	int x = get_global_id(0);	int y = get_global_id(1);	int id = y * options.width + x;    t_ray r = (t_ray){            VEC(x, y, 0),            VEC(0, 0, 1),            100    };    t_hit h;	if (id == 0)        print_args(&options, &camera, scene, lights);	printf("id: %d %d %d\n", id, px, py);	//output[id] = '#';	// printf("id: %d -> %c\n", id, output[id]);}